{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/mamikurokawa/Documents/react/react-complete-guide/1/src/App2.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport UserOutput from './ex/UserOutput';\nimport './App.css'; // import UserInput from './ex/UserInput';\n\nfunction App2() {\n  _s();\n\n  const [userName, newName] = useState();\n\n  const handleChange = event => {\n    newName(event.target.value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(UserOutput, {\n      name: userName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      onChange: handleChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ol\", {\n      children: [\"Add a method to manipulate the state (=> an event-handler method)\", /*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"Pass the event-handler method reference to the UserInput component and bind it to the input-change event\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"Ensure that the new input entered by the user overwrites the old username passed to UserOutput\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"Add two-way-binding to your input (in UserInput) to also display the starting username\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"Add styling of your choice to your components/ elements in the components - both with inline styles and stylesheets\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App2, \"XREVU1uKhInmEvrPuXWCBNA+oZU=\");\n\n_c = App2;\nexport default App2;\n\nvar _c;\n\n$RefreshReg$(_c, \"App2\");","map":{"version":3,"sources":["/Users/mamikurokawa/Documents/react/react-complete-guide/1/src/App2.js"],"names":["React","useState","UserOutput","App2","userName","newName","handleChange","event","target","value"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,UAAP,MAAuB,iBAAvB;AACA,OAAO,WAAP,C,CACA;;AAEA,SAASC,IAAT,GAAgB;AAAA;;AACd,QAAM,CAACC,QAAD,EAAWC,OAAX,IAAsBJ,QAAQ,EAApC;;AACA,QAAMK,YAAY,GAAIC,KAAD,IAAW;AAC9BF,IAAAA,OAAO,CAACE,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAP;AACD,GAFD;;AAGA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACE,QAAC,UAAD;AAAY,MAAA,IAAI,EAAEL;AAAlB;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,QAAQ,EAAEE;AAA7B;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE;AAAA,mGAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,eAME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cANF,eAUE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAVF,eAcE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAdF;AAAA;AAAA;AAAA;AAAA;AAAA,YAHF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAyBD;;GA9BQH,I;;KAAAA,I;AAgCT,eAAeA,IAAf","sourcesContent":["import React, { useState } from 'react';\nimport UserOutput from './ex/UserOutput';\nimport './App.css';\n// import UserInput from './ex/UserInput';\n\nfunction App2() {\n  const [userName, newName] = useState();\n  const handleChange = (event) => {\n    newName(event.target.value);\n  };\n  return (\n    <div className='App'>\n      <UserOutput name={userName} />\n      <input type='text' onChange={handleChange} />\n      <ol>\n        Add a method to manipulate the state (=> an event-handler method)\n        <li>\n          Pass the event-handler method reference to the UserInput component and\n          bind it to the input-change event\n        </li>\n        <li>\n          Ensure that the new input entered by the user overwrites the old\n          username passed to UserOutput\n        </li>\n        <li>\n          Add two-way-binding to your input (in UserInput) to also display the\n          starting username\n        </li>\n        <li>\n          Add styling of your choice to your components/ elements in the\n          components - both with inline styles and stylesheets\n        </li>\n      </ol>\n    </div>\n  );\n}\n\nexport default App2;\n"]},"metadata":{},"sourceType":"module"}